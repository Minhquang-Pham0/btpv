#!/bin/bash

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Log functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then 
    log_error "Please run as root"
    exit 1
fi

# Generate secure random password
generate_password() {
    openssl rand -hex 16
}

# Default values
INSTALL_DIR="/opt/password-vault"
CONFIG_DIR="/etc/password-vault"
LOG_DIR="/var/log/password-vault"
DATA_DIR="/var/lib/password-vault"
SERVICE_USER="password-vault"
SERVICE_GROUP="password-vault"
PYTHON_VENV="${INSTALL_DIR}/venv"

# Generate secure passwords
DB_PASSWORD=$(generate_password)
SECRET_KEY=$(generate_password)

# Create .env file
create_env_file() {
    log_info "Creating .env file..."
    cat > "${CONFIG_DIR}/.env" << EOF
# API Settings
PROJECT_NAME=Password Vault
API_V1_STR=/api/v1

# Security
SECRET_KEY=${SECRET_KEY}
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# PostgreSQL
POSTGRES_SERVER=localhost
POSTGRES_USER=${SERVICE_USER}
POSTGRES_PASSWORD=${DB_PASSWORD}
POSTGRES_DB=password_vault

# CORS
BACKEND_CORS_ORIGINS=["http://localhost:3000"]
EOF

    # Create a copy in the current directory for development
    cp "${CONFIG_DIR}/.env" .env
}

# Create required directories
create_directories() {
    log_info "Creating directory structure..."
    mkdir -p "${INSTALL_DIR}"
    mkdir -p "${CONFIG_DIR}"
    mkdir -p "${LOG_DIR}"
    mkdir -p "${DATA_DIR}"
    mkdir -p "${DATA_DIR}/db"
}

# Create service user and group
create_service_user() {
    log_info "Creating service user and group..."
    if ! getent group "${SERVICE_GROUP}" >/dev/null; then
        groupadd -r "${SERVICE_GROUP}"
    fi
    if ! getent passwd "${SERVICE_USER}" >/dev/null; then
        useradd -r -g "${SERVICE_GROUP}" -d "${INSTALL_DIR}" -s /sbin/nologin "${SERVICE_USER}"
    fi
}

# Install system dependencies
install_system_deps() {
    log_info "Installing system dependencies..."
    dnf install -y python39 python39-devel postgresql-server postgresql-contrib postgresql-devel gcc
}

# Install Python dependencies
install_python_deps() {
    log_info "Installing Python dependencies..."
    python3.9 -m venv "${PYTHON_VENV}"
    source "${PYTHON_VENV}/bin/activate"
    pip install --upgrade pip
    pip install -r requirements.txt
}

# Initialize and configure PostgreSQL
setup_database() {
    log_info "Setting up PostgreSQL..."
    
    # Initialize PostgreSQL if not already initialized
    if [ ! -f /var/lib/pgsql/data/postgresql.conf ]; then
        postgresql-setup --initdb
    fi

    # Configure pg_hba.conf
    cat > /var/lib/pgsql/data/pg_hba.conf << EOF
# Generated by password-vault installer
local   all             postgres                                peer
local   all             all                                     md5
host    all             all             127.0.0.1/32            md5
host    all             all             ::1/128                 md5
EOF

    # Start PostgreSQL
    systemctl enable postgresql
    systemctl start postgresql

    # Wait for PostgreSQL to be ready
    log_info "Waiting for PostgreSQL to start..."
    while ! sudo -u postgres psql -c '\l' >/dev/null 2>&1; do
        sleep 1
    done

    # Create database and user
    log_info "Creating database and user..."
    sudo -u postgres psql -c "CREATE USER ${SERVICE_USER} WITH PASSWORD '${DB_PASSWORD}';"
    sudo -u postgres psql -c "CREATE DATABASE password_vault OWNER ${SERVICE_USER};"
}

# Configure systemd service
setup_systemd() {
    log_info "Setting up systemd service..."
    cat > /etc/systemd/system/password-vault.service << EOF
[Unit]
Description=Password Vault Service
After=network.target postgresql.service

[Service]
User=${SERVICE_USER}
Group=${SERVICE_GROUP}
WorkingDirectory=${INSTALL_DIR}
Environment=PATH=${PYTHON_VENV}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
EnvironmentFile=${CONFIG_DIR}/.env
ExecStart=${PYTHON_VENV}/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000
Restart=always

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable password-vault
}

# Initialize database schema
init_database() {
    log_info "Initializing database schema..."
    source "${PYTHON_VENV}/bin/activate"
    export PYTHONPATH="${INSTALL_DIR}"
    alembic upgrade head
}

# Set proper permissions
set_permissions() {
    log_info "Setting permissions..."
    chown -R "${SERVICE_USER}:${SERVICE_GROUP}" "${INSTALL_DIR}"
    chown -R "${SERVICE_USER}:${SERVICE_GROUP}" "${CONFIG_DIR}"
    chown -R "${SERVICE_USER}:${SERVICE_GROUP}" "${LOG_DIR}"
    chown -R "${SERVICE_USER}:${SERVICE_GROUP}" "${DATA_DIR}"
    
    chmod 750 "${INSTALL_DIR}"
    chmod 750 "${CONFIG_DIR}"
    chmod 750 "${LOG_DIR}"
    chmod 750 "${DATA_DIR}"
    chmod 600 "${CONFIG_DIR}/.env"
}

# Main installation process
main() {
    log_info "Starting Password Vault installation..."
    
    create_directories
    create_service_user
    create_env_file
    install_system_deps
    install_python_deps
    setup_database
    setup_systemd
    init_database
    set_permissions
    
    log_info "Installation completed successfully!"
    log_info "Your credentials have been saved to: ${CONFIG_DIR}/.env"
    log_info "A copy of the .env file has been created in the current directory"
    log_info "You can start the service with: systemctl start password-vault"
}

# Run main installation
main